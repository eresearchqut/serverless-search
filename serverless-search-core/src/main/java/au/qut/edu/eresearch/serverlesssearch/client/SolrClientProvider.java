package au.qut.edu.eresearch.serverlesssearch.client;

import org.apache.solr.client.solrj.SolrClient;
import org.apache.solr.client.solrj.embedded.EmbeddedSolrServer;
import org.apache.solr.core.CoreContainer;
import org.eclipse.microprofile.config.inject.ConfigProperty;

import javax.enterprise.context.ApplicationScoped;
import javax.enterprise.inject.Produces;
import java.io.PrintStream;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.nio.file.StandardOpenOption;
import java.util.Date;

@ApplicationScoped
public class SolrClientProvider {

    @ConfigProperty(name = "index.mount")
    String indexMount;

    @Produces
    public SolrClient getSolrClient() throws Exception {
        final Path solrHome = Paths.get(indexMount);
        final Path lib = solrHome.resolve("lib");
        if (!Files.isDirectory(lib)) {
            Files.createDirectories(lib);
        }
        final Path solrXml = solrHome.resolve("solr.xml");
        if (!Files.exists(solrXml)) {
            try (PrintStream writer = new PrintStream(Files.newOutputStream(solrXml, StandardOpenOption.CREATE))) {
                writer.printf("<!-- Generated by %s on %tF %<tT -->%n", getClass().getSimpleName(), new Date());
                writer.println("<solr>");
                writer.printf("  <str name=\"%s\">%s</str>%n", "sharedLib", solrHome.relativize(lib));
                writer.println("</solr>");
            }
        }
        CoreContainer coreContainer = CoreContainer.createAndLoad(solrHome, solrXml);
        return new EmbeddedSolrServer(coreContainer, "coreName") {
            @Override
            public void close()  {
                //nop
            }
        };

    }
}
